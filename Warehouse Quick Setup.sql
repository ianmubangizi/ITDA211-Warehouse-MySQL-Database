-- MySQL Script generated by MySQL Workbench
-- Fri 10 May 2019 12:34:53 SAST
-- Model: Warehouse Database Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema warehouse
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `warehouse` ;

-- -----------------------------------------------------
-- Schema warehouse
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `warehouse` DEFAULT CHARACTER SET utf8 ;
USE `warehouse` ;

-- -----------------------------------------------------
-- Table `warehouse`.`Branch`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Branch` ;

CREATE TABLE IF NOT EXISTS `warehouse`.`Branch` (
  `BranchID` INT(30) NOT NULL AUTO_INCREMENT,
  `Location` VARCHAR(150) NULL DEFAULT NULL,
  `CapacityStatus` VARCHAR(50) NULL DEFAULT 'Empty',
  PRIMARY KEY (`BranchID`),
  UNIQUE INDEX `BranchID_UNIQUE` (`BranchID` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `warehouse`.`Employee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Employee` ;

CREATE TABLE IF NOT EXISTS `warehouse`.`Employee` (
  `EmployeeID` INT(30) NOT NULL AUTO_INCREMENT,
  `EmployeeName` VARCHAR(150) NULL DEFAULT NULL,
  `Position` VARCHAR(50) NULL DEFAULT NULL,
  `BranchID` INT(30) NOT NULL,
  PRIMARY KEY (`EmployeeID`, `BranchID`),
  INDEX `fk_Employee_1_idx` (`BranchID` ASC),
  UNIQUE INDEX `EmployeeID_UNIQUE` (`EmployeeID` ASC),
  CONSTRAINT `fk_Employee_1`
    FOREIGN KEY (`BranchID`)
    REFERENCES `warehouse`.`Branch` (`BranchID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `warehouse`.`Inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Inventory` ;

CREATE TABLE IF NOT EXISTS `warehouse`.`Inventory` (
  `InventoryID` INT(30) NOT NULL AUTO_INCREMENT,
  `Capacity` INT(10) NULL DEFAULT '0',
  `MaxCapacity` INT(10) NULL DEFAULT '1500',
  `BranchID` INT(30) NOT NULL,
  `EmployeeID` INT(30) NULL DEFAULT NULL,
  PRIMARY KEY (`InventoryID`, `BranchID`),
  INDEX `fk_Inventory_1_idx` (`BranchID` ASC),
  INDEX `fk_Inventory_2_idx` (`EmployeeID` ASC),
  UNIQUE INDEX `InventoryID_UNIQUE` (`InventoryID` ASC),
  CONSTRAINT `fk_Inventory_1`
    FOREIGN KEY (`BranchID`)
    REFERENCES `warehouse`.`Branch` (`BranchID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Inventory_2`
    FOREIGN KEY (`EmployeeID`)
    REFERENCES `warehouse`.`Employee` (`EmployeeID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `warehouse`.`Customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Customer` ;

CREATE TABLE IF NOT EXISTS `warehouse`.`Customer` (
  `CustomerID` INT(30) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(100) NULL DEFAULT NULL,
  `Address` VARCHAR(150) NULL DEFAULT NULL,
  `PhoneNumber` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`CustomerID`),
  UNIQUE INDEX `CustomerID_UNIQUE` (`CustomerID` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `warehouse`.`Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Order` ;

CREATE TABLE IF NOT EXISTS `warehouse`.`Order` (
  `OrderID` INT(30) NOT NULL AUTO_INCREMENT,
  `Type` TINYINT(4) NULL DEFAULT '1',
  `Payment` DOUBLE(10,2) NULL DEFAULT '0.00',
  `DateMade` DATETIME NULL DEFAULT NULL,
  `Fulfilment` DATETIME NULL DEFAULT NULL,
  `Completed` TINYINT(4) NULL DEFAULT '0',
  `BranchID` INT(30) NOT NULL,
  `CustomerID` INT(30) NOT NULL,
  PRIMARY KEY (`OrderID`, `BranchID`, `CustomerID`),
  INDEX `fk_Order_1_idx` (`BranchID` ASC),
  INDEX `fk_Order_2_idx` (`CustomerID` ASC),
  UNIQUE INDEX `OrderID_UNIQUE` (`OrderID` ASC),
  CONSTRAINT `fk_Order_1`
    FOREIGN KEY (`BranchID`)
    REFERENCES `warehouse`.`Branch` (`BranchID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Order_2`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `warehouse`.`Customer` (`CustomerID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `warehouse`.`Catalogue`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Catalogue` ;

CREATE TABLE IF NOT EXISTS `warehouse`.`Catalogue` (
  `CatalogueID` INT(30) NOT NULL AUTO_INCREMENT,
  `OrderID` INT(30) NOT NULL,
  PRIMARY KEY (`CatalogueID`, `OrderID`),
  INDEX `fk_Catalogue_1_idx` (`OrderID` ASC),
  UNIQUE INDEX `CatalogueID_UNIQUE` (`CatalogueID` ASC),
  CONSTRAINT `fk_Catalogue_1`
    FOREIGN KEY (`OrderID`)
    REFERENCES `warehouse`.`Order` (`OrderID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `warehouse`.`Cargo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Cargo` ;

CREATE TABLE IF NOT EXISTS `warehouse`.`Cargo` (
  `CargoID` INT(30) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(100) NULL DEFAULT NULL,
  `Status` VARCHAR(50) NULL DEFAULT 'Pending',
  `Quantity` INT(30) NULL DEFAULT NULL,
  `UnitWeight` DOUBLE(10,2) NULL DEFAULT NULL,
  `InventoryID` INT(30) NULL DEFAULT NULL,
  `CustomerID` INT(30) NOT NULL,
  `CatalogueID` INT(30) NULL DEFAULT NULL,
  PRIMARY KEY (`CargoID`, `CustomerID`),
  INDEX `fk_Cargo_1_idx` (`InventoryID` ASC),
  INDEX `fk_Cargo_2_idx` (`CustomerID` ASC),
  INDEX `fk_Cargo_3_idx` (`CatalogueID` ASC),
  UNIQUE INDEX `CargoID_UNIQUE` (`CargoID` ASC),
  CONSTRAINT `fk_Cargo_1`
    FOREIGN KEY (`InventoryID`)
    REFERENCES `warehouse`.`Inventory` (`InventoryID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Cargo_2`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `warehouse`.`Customer` (`CustomerID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Cargo_3`
    FOREIGN KEY (`CatalogueID`)
    REFERENCES `warehouse`.`Catalogue` (`CatalogueID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

USE `warehouse` ;

-- -----------------------------------------------------
-- Placeholder table for view `warehouse`.`Customer Orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`Customer Orders` (`CustomerID` INT, `Name` INT, `Address` INT, `PhoneNumber` INT, `OrderID` INT, `Completed` INT, `DateMade` INT, `Fulfilment` INT);

-- -----------------------------------------------------
-- Placeholder table for view `warehouse`.`Inventory Management`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`Inventory Management` (`InventoryID` INT, `EmployeeID` INT, `EmployeeName` INT, `BranchID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `warehouse`.`Order Cargo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`Order Cargo` (`OrderID` INT, `CargoID` INT, `Name` INT, `Status` INT, `Quantity` INT, `UnitWeight` INT, `InventoryID` INT);

-- -----------------------------------------------------
-- procedure Add Cargo
-- -----------------------------------------------------

USE `warehouse`;
DROP procedure IF EXISTS `warehouse`.`Add Cargo`;

DELIMITER $$
USE `warehouse`$$
CREATE DEFINER=`dcigroup`@`%` PROCEDURE `Add Cargo`(
							  customer int(30),
                              ordid int(30),
                              cargo varchar(100), 
                              weight double(10,2), 
                              qty int(30), 
                              inventory int(30)
							)
BEGIN
    declare catalogue int(30);
    set catalogue = (select C.CatalogueID
                     from `Catalogue` C
                              inner join `Order` O
                     where O.OrderID = ordid);

    insert into `Cargo`(`Cargo`.Name, `Cargo`.Quantity, `Cargo`.UnitWeight, `Cargo`.InventoryID, `Cargo`.CustomerID,
                        `Cargo`.CatalogueID)
    values (cargo, qty, weight, inventory, customer, catalogue);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Add Inventory
-- -----------------------------------------------------

USE `warehouse`;
DROP procedure IF EXISTS `warehouse`.`Add Inventory`;

DELIMITER $$
USE `warehouse`$$
CREATE DEFINER=`dcigroup`@`%` PROCEDURE `Add Inventory`(inventory int(30), branch int(30))
BEGIN
		if (!(select exists(select InventoryID
                            from warehouse.Inventory where InventoryID = inventory and BranchID = branch))) then
            insert into Inventory(InventoryID, BranchID) values (inventory, branch);
        end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Add Order
-- -----------------------------------------------------

USE `warehouse`;
DROP procedure IF EXISTS `warehouse`.`Add Order`;

DELIMITER $$
USE `warehouse`$$
CREATE DEFINER=`dcigroup`@`%` PROCEDURE `Add Order`(branch int(30), 
							  customer int(30), 
							  payment double(10,2), 
                              ordtype tinyint(1), 
                              cargo varchar(100), 
                              weight double(10,2), 
                              qty int(30), 
                              inventory int(30)
                              )
BEGIN
	declare ordtime timestamp;
    declare ordid int(30);
    set ordtime = (select current_timestamp());
    
	insert into `Order`(`Order`.Type, `Order`.Payment, `Order`.DateMade, `Order`.BranchID, `Order`.CustomerID) 
    values (ordtype,payment,ordtime,branch,customer);
    
    set ordid = (select O.OrderID from `Order` O where O.CustomerID = customer and O.DateMade = ordtime);
    
    call `Add Inventory`(inventory, branch);
    
    if(qty < (select `Inventory Space`(inventory, branch, 'left'))) then
		call `Add Cargo`(customer, ordid, cargo, weight, qty, inventory);
        call `Operate Inventory` (inventory, branch , qty , ordtype);
    end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function Calculate Branch Capacity
-- -----------------------------------------------------

USE `warehouse`;
DROP function IF EXISTS `warehouse`.`Calculate Branch Capacity`;

DELIMITER $$
USE `warehouse`$$
CREATE DEFINER=`dcigroup`@`%` FUNCTION `Calculate Branch Capacity`(branch int(30)) RETURNS double(10,2)
BEGIN
    declare cap int(10);
    declare max int(10);
    set cap = (select sum(I.Capacity) from Inventory I where I.BranchID = branch);
    set max = (select sum(I.MaxCapacity) from Inventory I where I.BranchID = branch);
    return (cap / max) * 100;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function Capacity Status
-- -----------------------------------------------------

USE `warehouse`;
DROP function IF EXISTS `warehouse`.`Capacity Status`;

DELIMITER $$
USE `warehouse`$$
CREATE DEFINER=`dcigroup`@`%` FUNCTION `Capacity Status`(branch int(30)) RETURNS varchar(50) CHARSET utf8
begin
    declare cap double(10, 2);
    declare str varchar(50);
    set cap = (select `Calculate Branch Capacity`(branch));
    case
        when cap = 0 then set str = 'Branch Empty';
        when cap > 0 then set str = concat(cap, '%', ' of Storage Used');
        when cap >= 95 then set str = 'Branch Full';
        end case;
    return str;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- function Inventory Space
-- -----------------------------------------------------

USE `warehouse`;
DROP function IF EXISTS `warehouse`.`Inventory Space`;

DELIMITER $$
USE `warehouse`$$
CREATE DEFINER=`dcigroup`@`%` FUNCTION `Inventory Space`(inty int(30), branch int(30), getvalue varchar(10)) RETURNS double(10,2)
BEGIN
	declare min int(10);
    declare max int(10);
    declare  val int(10);
    
    set min = (select I.Capacity from Inventory I where I.InventoryID = inty and I.BranchID = branch);
    set max = (select I.MaxCapacity from Inventory I where I.InventoryID = inty and I.BranchID = branch);
    set val = max - min;

	case getvalue
		when 'min' then
			return min;
        when 'max' then
			return max;
        when 'left' then
			return val;
	end case;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Operate Inventory
-- -----------------------------------------------------

USE `warehouse`;
DROP procedure IF EXISTS `warehouse`.`Operate Inventory`;

DELIMITER $$
USE `warehouse`$$
CREATE DEFINER=`dcigroup`@`%` PROCEDURE `Operate Inventory`(inventory int(30), branch int(30), qty int(30), operation tinyint)
BEGIN
    declare `min` int(10);
    declare `max` int(10);
    set `min` = (select `Inventory Space`(inventory, branch, 'min'));
    set `max` = (select `Inventory Space`(inventory, branch, 'max'));

    case operation
        when 0 then
            if (!((`min` - qty) <= 0)) then
                update Inventory I set I.Capacity = I.Capacity - qty where I.InventoryID = inventory;
            end if;
        when 1 then
            if (`max` >= (`min` + qty)) then
                update Inventory I set I.Capacity = I.Capacity + qty where I.InventoryID = inventory;
            end if;
        end case;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `warehouse`.`Customer Orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Customer Orders`;
DROP VIEW IF EXISTS `warehouse`.`Customer Orders` ;
USE `warehouse`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `dcigroup`@`%` 
    SQL SECURITY DEFINER
VIEW `warehouse`.`Customer Orders` AS
    SELECT 
        `C`.`CustomerID` AS `CustomerID`,
        `C`.`Name` AS `Name`,
        `C`.`Address` AS `Address`,
        `C`.`PhoneNumber` AS `PhoneNumber`,
        `O`.`OrderID` AS `OrderID`,
        `O`.`Completed` AS `Completed`,
        `O`.`DateMade` AS `DateMade`,
        `O`.`Fulfilment` AS `Fulfilment`
    FROM
        (`warehouse`.`Customer` `C`
        JOIN `warehouse`.`Order` `O` ON ((`O`.`CustomerID` = `C`.`CustomerID`)));

-- -----------------------------------------------------
-- View `warehouse`.`Inventory Management`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Inventory Management`;
DROP VIEW IF EXISTS `warehouse`.`Inventory Management` ;
USE `warehouse`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `dcigroup`@`%` 
    SQL SECURITY DEFINER
VIEW `warehouse`.`Inventory Management` AS
    SELECT 
        `I`.`InventoryID` AS `InventoryID`,
        `E`.`EmployeeID` AS `EmployeeID`,
        `E`.`EmployeeName` AS `EmployeeName`,
        `E`.`BranchID` AS `BranchID`
    FROM
        (`warehouse`.`Inventory` `I`
        JOIN `warehouse`.`Employee` `E` ON ((`E`.`EmployeeID` = `I`.`EmployeeID`)));

-- -----------------------------------------------------
-- View `warehouse`.`Order Cargo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`Order Cargo`;
DROP VIEW IF EXISTS `warehouse`.`Order Cargo` ;
USE `warehouse`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `dcigroup`@`%` 
    SQL SECURITY DEFINER
VIEW `warehouse`.`Order Cargo` AS
    SELECT 
        `O`.`OrderID` AS `OrderID`,
        `Cr`.`CargoID` AS `CargoID`,
        `Cr`.`Name` AS `Name`,
        `Cr`.`Status` AS `Status`,
        `Cr`.`Quantity` AS `Quantity`,
        `Cr`.`UnitWeight` AS `UnitWeight`,
        `Cr`.`InventoryID` AS `InventoryID`
    FROM
        ((`warehouse`.`Cargo` `Cr`
        JOIN `warehouse`.`Catalogue` `Ct` ON ((`Ct`.`CatalogueID` = `Cr`.`CatalogueID`)))
        JOIN `warehouse`.`Order` `O` ON ((`O`.`OrderID` = `Ct`.`OrderID`)));

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `warehouse`;

DELIMITER $$

USE `warehouse`$$
DROP TRIGGER IF EXISTS `warehouse`.`Order_AFTER_INSERT` $$
USE `warehouse`$$
CREATE
DEFINER=`dcigroup`@`%`
TRIGGER `warehouse`.`Order_AFTER_INSERT`
AFTER INSERT ON `warehouse`.`Order`
FOR EACH ROW
BEGIN
	insert into `Catalogue`(OrderID) value (NEW.OrderID);
END$$


DELIMITER ;
